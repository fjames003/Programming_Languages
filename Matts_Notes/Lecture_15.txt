Things to know for homework 4

  string functions: split and join

    help(str)
    help(str.split): breaks a string by occurrences of a substring
      l = '1 2 3 4 5'.split(' ')
      l

      l = '1 banana 2 banana 3 banana 4'.split('banana')
      l

  how can we remove those extra spaces?
    help(str.strip)
      ' 1 '.strip()
      '     1    \t\n    '.strip()


  Try 1: how can we do it for the whole list?

  l1=list(l) # make a copy
  i=0
  while(i < len(l1)):
    l1[i] = l1[i].strip()
    i += 1

  Try 2: use range function:

    help(range)

    range(10)   # generator

    list(range(10))

  l1 = list(l)
  for i in range(len(l)):
    l1[i] = l1[i].strip()

  Better!

  Try 3: use map and lambda

  l1 = map(lambda s: s.strip(), l)

  # generator again!

  list(l1)

  Try 4: list comprehensions. syntactic sugar for map/lambda
         python stole this from FP (haskell)

  l1 = [s.strip() for s in l]


Ok, now let's turn this list back into a string. Want the inverse of split.
  
  help(str.join)
      ' '.join(l1)
      '+'.join(l1)
      ''.join(l1)

  list functions: append, index, pop

  l = [1,2,3,4,5]
  l.append('hi')   # mutates the list; does not return a new list!
  l 
  l.index('hi')  
  l.pop()      # mutation
  l
  l.pop(0)


  # test if a list contains an element:
  if 'hi' in l:
    print('yes')

  # works for dictionaries too (with their keys)
  d = {'hi' : 1, 'hey' : 2}
  if 'hi' in d:
    print('yes')
  if 'yo' in d:
    print('yes')

  # dynamically evaluate a string containing python source code
  eval('1 + 2')

  def sq(x):
    return x*x
  eval('sq(5)')

  # eval can access the current environment

  # we can ask eval to use a particular environment as well (for homework!)

  env = {'x' : 5, 'y': 6}
  eval('x + y', env)
  
  help(eval)
  


can get the behavior of a "normal" for loop with the range() function

for i in range(10):
  print(i)

Can set the low index:

for i in range(4,10):
  print(i)

Can set the step:

for i in range(4,10,2):
  print(i)

What is range(10)? 

>>> range(10)
range(0,10)

Not very illuminating. range is an /iterator/ which roughly means something you
can iterate over with a for loop. You can also convert it to a list:

>>> list(range(10))

>>> list({'x':1, 'y':2, 'z':3})
>>> list([1,2,3])  # copies the list.

>>> l1 = [1,2,3]
>>> l2 = list(l1)
>>> l1
>>> l2
>>> l1.reverse()
>>> l1
>>> l2

Example: cat.py
    read a list of file names from args,
    concatenate the files to stdout

# step1 : print arguments

import sys

for fname in sys.argv:
  print(fname)

# step2 : cat a single file

import sys

def catFile(filename):
  # open the file
  f = open(filename)

  # iterate over the lines
  for line in f:
    print(line)

  # done! close the file
  f.close()

# step 3: catFile for each argument in sys.argv
for filename in sys.argv:
  catFile(filename)


Two problems!
  - too many files (sys.argv[0] == cat.py)
  - too many newlines

  How do we skip the first argument of sys.argv?

    # use range
    for i in range(1, len(sys.argv)):
      filename = sys.argv[i]
      catFile(filename)

    # use a slice (better style; more readable)
    for filename in sys.argv[1:]:
      catFile(filename)


  How do we remove the newlines from each line?
    # use a slice to remove the last character.
    print(line[:-1])
  
    # could also pop off the last character.
    line.pop()
    print(line)